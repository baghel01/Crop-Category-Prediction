# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d1sTOzdSr3Gu3Gur9juUgeXtpS2qrmmf
"""

!sudo apt-get install unzip
!unzip /content/input_32bit.zip -d /tmp
!unzip /content/target.zip -d/home
import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image
import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Input, Conv2DTranspose, Concatenate, BatchNormalization, UpSampling2D
from tensorflow.keras.layers import  Dropout, Activation
from tensorflow.keras.optimizers import Adam, SGD
from keras.layers.advanced_activations import LeakyReLU
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping
from tensorflow.keras import backend as K
from tensorflow.keras.utils import plot_model
import tensorflow as tf
import glob
import random
import cv2
from random import shuffle
'''from tensorflow.keras import''' 

import cv2
import os
import numpy as np
import matplotlib.pyplot as plt

a=os.listdir('/tmp/');
b=os.listdir("/home/");
x=plt.imread("/tmp/input_32bit/lc8_2015245_10_11_1.tif")
print(x.size)
y=plt.imread("/tmp/input_32bit/lc8_2015245_10_11_3.tif")  
print(y.size)
pixel=[]
for filename in os.listdir("/tmp/input_32bit/"):
    img=cv2.imread(os.path.join("/tmp/input_32bit/",filename))
    pixel.append(img)
    pixel[0].size

from PIL import Image
pix=[]
j=0
for i in os.listdir("/tmp/input_32bit/"):
        y=Image.open("/tmp/input_32bit/"+i)
        pix.append(np.array(y))  
from numpy import zeros, newaxis
for i in range(len(pix)):
    pix[i]=np.reshape(pix[i],(128,128))


group=[]
for i in range(1,1594):
    temp=np.random.rand(128,128,7)
    for j in range(0,7):
        x=pix[(i-1)*7+j]
        temp[:,:,j]=x
    group.append(temp)
    

res=np.array(group)

test=[]
for k in os.listdir("/home/target/"):
        z=Image.open("/home/target/"+k)
        test.append(np.array(z))  


rest=np.array(test)
    
print(len(rest))
print(len(res))
print(res)
print(pix[i])
batch_size = 64

all_files = res
shuffle(all_files)

split = int(0.90 * len(all_files))

#split into training and testing
train_files = all_files[0:split]
test_files  = all_files[split:]
train_generator = (train_files,batch_size)
test_generator  = (test_files,batch_size)
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(res,rest, test_size = 0.04, random_state = 0)
print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

def unet(sz = (128, 128, 7)):
  x = Input(sz)
  inputs = x
  
  #down sampling 
  f = 16
  layers = []
  
  for i in range(0, 6):
    x = Conv2D(f, 3, activation='relu', padding='same') (x)
    x = Conv2D(f, 3, activation='relu', padding='same') (x)
    layers.append(x)
    x = MaxPooling2D() (x)
    f = f*2
  ff2 = 64 
  
  #bottleneck 
  j = len(layers) - 1
  x = Conv2D(f, 3, activation='relu', padding='same') (x)
  x = Conv2D(f, 3, activation='relu', padding='same') (x)
  x = Conv2DTranspose(ff2, 2, strides=(2, 2), padding='same') (x)
  x = Concatenate(axis=3)([x, layers[j]])
  j = j -1 
  
  #upsampling 
  for i in range(0, 5):
    ff2 = ff2//2
    f = f // 2 
    x = Conv2D(f, 3, activation='relu', padding='same') (x)
    x = Conv2D(f, 3, activation='relu', padding='same') (x)
    x = Conv2DTranspose(ff2, 2, strides=(2, 2), padding='same') (x)
    x = Concatenate(axis=3)([x, layers[j]])
    j = j -1 
    
  
  #classification 
  x = Conv2D(f, 3, activation='relu', padding='same') (x)
  x = Conv2D(f, 3, activation='relu', padding='same') (x)
  outputs = Conv2D(1, 1, activation='relu') (x)
  
  #model creation 
  model = Model(inputs=[inputs], outputs=[outputs])
  model.compile(optimizer = Adam(), loss = 'binary_crossentropy', metrics = ['accuracy'])
  
  return model














model = unet()
model.summary()
model.compile(optimizer = Adam(), loss = 'binary_crossentropy', metrics = ['accuracy'])
results = model.fit(xtrain, ytrain, batch_size=64, epochs=5,validation_data=(xtest,ytest))